
def args = [
        '-Dfml.coreMods.load=zone.rong.mixinbooter.MixinBooterPlugin',
        '-Dmixin.hotSwap=true',
        '-Dmixin.checks.interfaces=true'
]

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            name 'FancyGradle'
            url 'https://gitlab.com/api/v4/projects/26758973/packages/maven'
        }
        maven {
            name 'MixinGradle Maven'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: "0.7+"
        classpath group: 'wtf.gofancy.fancygradle', name: 'wtf.gofancy.fancygradle.gradle.plugin', version: '1.1.+'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'wtf.gofancy.fancygradle'

fancyGradle {
    patches {
        resources
        coremods
        codeChickenLib
        asm
    }
}

version = '7.1p'
group = 'zone.rong' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = '!mixinbooter' // I hate Forge

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: "stable", version: "39-1.12"
    runs {
        client {
            workingDirectory project.file('run')
            jvmArgs args

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                foamfix {
                    source sourceSets.main
                }
            }
        }
        server {
            jvmArgs args

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                mixinbooter {
                    source sourceSets.main
                }
            }
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

repositories {
    maven {
        url "https://repo.spongepowered.org/maven"
    }
    maven {
        name 'Jitpack'
        url 'https://jitpack.io'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    embed ("com.github.CleanroomMC:Mixin:5395bdb11e") {
        exclude module: "asm-commons"
        exclude module: "asm-tree"
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "log4j-core"
        exclude module: "gson"
        exclude module: "commons-io"
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "FMLCorePlugin": 'zone.rong.mixinbooter.MixinBooterPlugin',
                "TweakClass": 'org.spongepowered.asm.launch.MixinTweaker'
        ])
    }
    from (configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
       exclude 'LICENSE.txt', 'META-INF/MANIFSET.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/services/*.Processor', 'module-info.class'
    }
}

sourceSets {
    main {
        ext.refMap = 'mixins.mixinbooter.refmap.json'
    }
}

processResources {
    // required to allow file expansion later
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
